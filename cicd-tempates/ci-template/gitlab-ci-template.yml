stages:
  - code-style
  - check
  - test
  - release
  - push-to-helm
  - argocd-sync
  - generate-child-pipeline
  - trigger-child-pipeline

# Dynamic Pipeline Generation with Python Script

generate-child-pipeline:
  stage: generate-child-pipeline
  image: bitnami/python
  script:
    - git -c http.sslVerify=false clone https://$CI_GITLAB_USERNAME:$CI_GITLAB_PASSWORD@gitlab.local.lan/devops/cicd-tools/dynamic-pipeline-generator.git
    - python3 dynamic-pipeline-generator/main.py
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - $CI_PROJECT_MODE_MULTI_MODULE == "TRUE"
  artifacts:
    paths:
      - child-pipeline-gitlab-ci.yml

trigger-child-pipeline:
  stage: trigger-child-pipeline
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - $CI_PROJECT_MODE_MULTI_MODULE == "TRUE"
  trigger:
    include:
      - artifact: child-pipeline-gitlab-ci.yml
        job: generate-child-pipeline
    strategy: depend

# Sonarqube code-style stage

.sonar-gradle:
  stage: code-style
  image: $CI_BACKEND_IMAGE_VERSION_GRADLE
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
    GRADLE_OPTS: "-Dgradle.user.home=.gradle -Dorg.gradle.daemon=false"
  before_script:
    - chmod +x gradlew
    - ./gradlew clean build jacocoTestReport  
  script:
    - ./gradlew sonarqube -Dsonar.host.url=$URL -Dsonar.login=$USERNAME -Dsonar.password=$PASSWORD -Dsonar.qualitygate.wait=false

.sonar-maven:
  stage: code-style
  image: $CI_BACKEND_IMAGE_VERSION_MAWEN
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0" 
  before_script:
    - mvn clean test
  script:
    - mvn clean verify sonar:sonar -Dsonar.host.url=$URL -Dsonar.login=$USERNAME -Dsonar.password=$PASSWORD -Dsonar.qualitygate.wait=false
    
code-style-gradle:
  extends: .sonar-gradle
  variables:
    URL: $CI_SONAR_DEV_URL
    USERNAME: $CI_SONAR_DEV_USERNAME
    PASSWORD: $CI_SONAR_DEV_PASSWORD
  only:
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_GRADLE == "TRUE" && $CI_CODE_STYLE_SONARQUBE == "TRUE"'

code-style-maven-dev:
  extends: .sonar-maven
  variables:
    URL: $CI_SONAR_DEV_URL
    USERNAME: $CI_SONAR_DEV_USERNAME
    PASSWORD: $CI_SONAR_DEV_PASSWORD
  only:
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_CODE_STYLE_SONARQUBE == "TRUE"'
    
code-style-maven-prod:
  extends: .sonar-maven
  variables:
    URL: $CI_SONAR_PROD_URL
    USERNAME: $CI_SONAR_PROD_USERNAME
    PASSWORD: $CI_SONAR_PROD_PASSWORD
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_CODE_STYLE_SONARQUBE == "TRUE"'

# Synk check for mawen and gradle

snyk-sca-mawen:  
  stage: check
  image: gitlab.local.lan:4567/devops/images/snyk-mawen:latest
  script:
    - mvn install
    - snyk auth $CI_SNYK_TOKEN
    - snyk test --fail-on=patchable --json | snyk-to-html -o snyk_code.html
  artifacts:
    when: always
    paths:
      - snyk_code.html
  only:
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_CODE_CHECK_SNYK == "TRUE"'

snyk-code-mawen:  
  stage: check
  image: gitlab.local.lan:4567/devops/images/snyk-mawen:latest
  script:
    - mvn install
    - snyk auth $CI_SNYK_TOKEN
    - snyk code test --json | snyk-to-html -o snyk_code.html
  artifacts:
    when: always
    paths:
      - snyk_code.html
  only:
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_CODE_CHECK_SNYK == "TRUE"'

snyk-sca-gradle:
  stage: check
  image: gitlab.local.lan:4567/devops/images/snyk-gradle:latest
  script:
    - gradle build
    - snyk auth $CI_SNYK_TOKEN
    - snyk test --json | snyk-to-html -o snyk_sca.html
  artifacts:
    when: always
    paths:
      - snyk_sca.html
  only:
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_GRADLE == "TRUE" && $CI_CODE_CHECK_SNYK == "TRUE"'

snyk-code-gradle:
  stage: check
  image: gitlab.local.lan:4567/devops/images/snyk-gradle:latest
  script:
    - gradle build
    - snyk auth $CI_SNYK_TOKEN
    - snyk code test --severity-threshold=medium --fail-on=patchable --json | snyk-to-html -o snyk_code.html
  artifacts:
    when: always
    paths:
      - snyk_code.html
  only:
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_GRADLE == "TRUE" && $CI_CODE_CHECK_SNYK == "TRUE"'
  
# Test stage for maven and gradle

.test-maven:
  stage: test
  image: $CI_BACKEND_IMAGE_VERSION_MAWEN
  script:
    - mvn clean test

.test-gradle:
  stage: test
  image: $CI_BACKEND_IMAGE_VERSION_GRADLE
  variables:
    GRADLE_OPTS: "-Dgradle.user.home=.gradle -Dorg.gradle.daemon=false"
  before_script:
    - chmod +x gradlew
  script:
    - ./gradlew check

test-maven:
  extends: .test-maven
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_PROJECT_TEST_STAGE == "TRUE"'

test-gradle:
  extends: .test-gradle
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_GRADLE == "TRUE" && $CI_PROJECT_TEST_STAGE == "TRUE"'

# Build Maven with jib, Gradle single with jib

.release-jib-maven:
  stage: release
  image: $CI_BACKEND_IMAGE_VERSION_MAWEN
  variables:
    MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  script:
    - mvn compile jib:build -Djib.to.image=$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH-$CI_PIPELINE_ID -Djib.to.auth.username=$CI_REGISTRY_USER -Djib.to.auth.password=$CI_REGISTRY_PASSWORD

.release-jib-gradle-mono-repo:
  stage: release
  image: $CI_BACKEND_IMAGE_VERSION_GRADLE
  variables:
    GRADLE_OPTS: "-Dgradle.user.home=.gradle -Dorg.gradle.daemon=false"
  before_script:
    - chmod +x gradlew
  script:
    - ./gradlew jib -Djib.to.image=$CI_REGISTRY_IMAGE -Djib.to.tags=$CI_COMMIT_BRANCH-$CI_PIPELINE_ID -Djib.to.auth.username=$CI_GITLAB_USERNAME -Djib.to.auth.password=$CI_GITLAB_PASSWORD -Djib.from.auth.username=$CI_GITLAB_USERNAME -Djib.from.auth.password=$CI_GITLAB_PASSWORD --no-daemon
  only:
    - develop

release-gradle:
  extends: .release-jib-gradle-mono-repo
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_GRADLE == "TRUE" && $CI_RELEASE_TYPE_JIB == "TRUE"'

release-maven:
  extends: .release-jib-maven
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_RELEASE_TYPE_JIB == "TRUE"'

# Release Front, Maven Kaniko ------------------------------------------------------------------------------------------------------------------------

.release-image-kaniko:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}| base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor   --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --insecure --skip-tls-verify  --destination ${CI_REGISTRY}\/${CI_PROJECT_NAMESPACE}\/${CI_PROJECT_NAME}:$CI_COMMIT_BRANCH-$CI_PIPELINE_ID

release-kaniko-mawen:
  extends: .release-image-kaniko
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_MAVEN == "TRUE" && $CI_RELEASE_TYPE_KANIKO == "TRUE"'

release-kaniko-gradle:
  extends: .release-image-kaniko
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_GRADLE == "TRUE" && $CI_RELEASE_TYPE_KANIKO == "TRUE"'

release-kaniko-python:
  extends: .release-image-kaniko
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_APPLICATION_TYPE_PYTHON == "TRUE" && $CI_RELEASE_TYPE_KANIKO == "TRUE"'

release-kaniko-frontend:
  extends: .release-image-kaniko
  only:
    refs:
      - "develop"
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_FRONTEND == "TRUE" && $CI_RELEASE_TYPE_KANIKO == "TRUE"'

# Push to helm

.push:
  stage: push-to-helm
  image: dtzar/helm-kubectl
  environment:
    name: $CI_COMMIT_BRANCH
  variables:
    GIT_STRATEGY: none
  script:
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | awk -F '/' '{print $3}')
    - CI_CD_PROJECT_PATH=development/chart
    - git -c http.sslVerify=false clone "https://${CI_GITLAB_USERNAME}:${CI_GITLAB_PASSWORD}@gitlab.local.lan/${CI_CD_PROJECT_PATH}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git" -b ${CI_COMMIT_BRANCH}
    - cd ${CI_PROJECT_NAME}
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
    - sed -i "s/tag:.*/tag:\ ${CI_COMMIT_BRANCH}-${CI_PIPELINE_ID}/" ${CI_COMMIT_BRANCH}.yaml
    - git add ${CI_COMMIT_BRANCH}.yaml && git commit -m "Add new tag ${CI_PIPELINE_ID}" && git -c http.sslVerify=false push origin ${CI_COMMIT_BRANCH}

push-dev:
  extends: 
    - .push
  only:
    refs:
      - "develop"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "FALSE"'
  resource_group: development

push-dev-dmz:
  extends: 
    - .push
  only:
    refs:
      - "develop"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_FRONTEND == "TRUE"'
  resource_group: development

push-prod:
  extends: 
    - .push
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "FALSE"'
  when: manual
  resource_group: production

push-prod-dmz:
  extends: 
    - .push
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_FRONTEND == "TRUE"'
  when: manual
  resource_group: production

push-dev-dmz-for-backend:
  extends: 
    - .push
  only:
    refs:
      - "develop"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "TRUE"'
  resource_group: development

push-prod-dmz-for-backend:
  extends: 
    - .push
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "TRUE"'
  resource_group: production

# Sync Argo

.argocd-sync-job-dev:
  image: gitlab.local.lan:4567/devops/images/argocli:latest
  stage: argocd-sync
  variables:
    GIT_STRATEGY: none
  script:
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | awk -F '/' '{print $3}')
    - argocd  login $URL --username $USERNAME --password $PASSWORD --insecure
    - argocd app sync dev-$CI_PROJECT_NAME-$CI_PROJECT_NAMESPACE &
    - sleep 15

.argocd-sync-job-prod:
  image: gitlab.local.lan:4567/devops/images/argocli:latest
  stage: argocd-sync
  variables:
    GIT_STRATEGY: none
  script:
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | awk -F '/' '{print $3}')
    - argocd --insecure login $URL --username $USERNAME --password $PASSWORD
    - argocd app sync prod-$CI_PROJECT_NAME-$CI_PROJECT_NAMESPACE & 
    - sleep 15
 
argo-sync-dev:
  variables:
    URL: $CI_ARGO_SERVER_DEV 
    USERNAME: $CI_ARGO_USERNAME_DEV 
    PASSWORD: $CI_ARGO_PASSWORD_DEV 
  extends: 
    - .argocd-sync-job-dev
  needs:
    - push-dev
  only:
    refs:
      - "develop"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "FALSE"'
  resource_group: development

argo-sync-dev-dmz:
  variables:
    URL: $CI_ARGO_SERVER_DEVDMZ
    USERNAME: $CI_ARGO_USERNAME_DEVDMZ
    PASSWORD: $CI_ARGO_PASSWORD_DEVDMZ
  extends: 
    - .argocd-sync-job-dev
  needs:
    - push-dev-dmz
  only:
    refs:
      - "develop"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_FRONTEND == "TRUE"'
  resource_group: development

argo-sync-dev-dmz-for-backend:
  variables:
    URL: $CI_ARGO_SERVER_DEVDMZ
    USERNAME: $CI_ARGO_USERNAME_DEVDMZ
    PASSWORD: $CI_ARGO_PASSWORD_DEVDMZ
  extends: 
    - .argocd-sync-job-dev
  needs:
    - push-dev-dmz-for-backend
  only:
    refs:
      - "develop"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "TRUE"'
  resource_group: development

argo-sync-prod:
  variables:
    URL: $CI_ARGO_SERVER_PROD 
    USERNAME: $CI_ARGO_USERNAME_PROD 
    PASSWORD: $CI_ARGO_PASSWORD_PROD 
  extends: 
    - .argocd-sync-job-prod
  needs:
    - push-prod
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "FALSE"'
  resource_group: production

argo-sync-prod-dmz:
  variables:
    URL: $CI_ARGO_SERVER_PRODDMZ
    USERNAME: $CI_ARGO_USERNAME_PRODDMZ 
    PASSWORD: $CI_ARGO_PASSWORD_PRODDMZ
  extends: 
    - .argocd-sync-job-prod
  needs:
    - push-prod-dmz
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_FRONTEND == "TRUE"'
  when: manual
  resource_group: production

argo-sync-prod-dmz-for-backend:
  variables:
    URL: $CI_ARGO_SERVER_PRODDMZ
    USERNAME: $CI_ARGO_USERNAME_PRODDMZ 
    PASSWORD: $CI_ARGO_PASSWORD_PRODDMZ
  extends: 
    - .argocd-sync-job-prod
  needs:
    - push-prod-dmz-for-backend
  only:
    refs:
      - "master"
    variables:
      - '$CI_PROJECT_MODE_MONO_REPO == "TRUE" && $CI_PROJECT_TYPE_BACKEND == "TRUE" && $CI_PROJECT_TYPE_BACKEND_DMZ == "TRUE"'
  resource_group: production
